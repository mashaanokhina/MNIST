#import libraries
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
from keras.datasets import mnist
# Separate our features and labels
(train_images, train_labels),(test_images, test_labels)=mnist.load_data()
print(type(train_images))
print('train_images.dtype:',train_images.dtype)
print('train_images.shape:',train_images.shape,'test_images.shape:',test_images.shape,)
#show random image from the train dataset
from random import randrange
index=randrange(60000)
import matplotlib.pyplot as plt
plt.imshow(train_images[index], cmap='gray')
plt.show()
print('this is observation number:', index)
print('this image is:' +str(train_labels[index]))

print('train_labels.shape:',train_labels.shape, 'test_labels.shape:',test_labels.shape)
print(test_images.ndim)

#Prepare the data for TensorFlow
train_images=train_images.reshape((60000,28*28))
train_images=train_images.astype('float32')/255
print('train_images.shape:',train_images.shape)
test_images=test_images.reshape((10000,28*28))
test_images=test_images.astype('float32')/255
print('test_images.shape:',test_images.shape)


from keras.utils import to_categorical
train_labels=to_categorical(train_labels)
test_labels=to_categorical(test_labels)
#Create the model
from keras import models
from keras import layers
model=models.Sequential()
model.add(layers.Dense(500, activation='relu',input_shape=(28*28,)))
model.add(layers.Dense(10,activation='softmax'))
print(model.summary())

#hyper-parameters for optimizer
from keras import optimizers
optimizer = tf.keras.optimizers.Adam()

model.compile(loss='categorical_crossentropy',
              optimizer=optimizer,
              metrics=['accuracy'])
# Train the model 10 epochs using 128-observation batches and using the test holdout dataset for validation
num_epochs = 10
history = model.fit(train_images, train_labels, epochs=num_epochs, batch_size=128, validation_data=(test_images,test_labels))
print(history)

epoch_nums = range(1,num_epochs+1)
training_loss = history.history["loss"]
validation_loss = history.history["val_loss"]
plt.plot(epoch_nums, training_loss)
plt.plot(epoch_nums, validation_loss)
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['training', 'validation'], loc='upper right')
plt.show()
print('training_loss:',training_loss)
print('validation_loss:',validation_loss)


print("END")

